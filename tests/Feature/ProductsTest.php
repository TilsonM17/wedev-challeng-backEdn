<?php

namespace Tests\Feature;

use App\Models\Merchant;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductsTest extends TestCase
{
    public $adminUser;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->adminUser = User::where('is_admin', true)->first();
        $this->actingAs($this->adminUser);
    }

    /**
     * A basic feature test example.
     */
    public function test_product_index_should_return_data(): void
    {
        $response = $this->get('/api/products');

        $response->assertStatus(200);
        $response->assertJsonIsArray('data');
    }

    public function test_it_can_create_a_product()
    {
        $product = Product::factory(1)->make()->toArray()[0];
        $this->post('/api/products', $product);
        $is_admin = $this->isAdmin();

        if (null === $is_admin) {
            $this->assertJson('{"message": "Você não tem permissão para cadastrar um produto"}');
            return;
        }

        $this->assertDatabaseHas('products', $product);
    }

    public function test_it_can_retrieve_a_product()
    {
        $product = User::inRandomOrder()->first();
        $response = $this->get('/api/products/' . $product->id);
        $response->assertOk();
    }

    public function test_it_can_update_a_product()
    {
        $this->withoutExceptionHandling();
        $data = Product::factory(1)->make()->toArray()[0];
        $random = Product::inRandomOrder()->first(['id']);

        $this->putJson('/api/products/' . $random->id, $data);

        $is_admin = $this->isAdmin();
        if (null === $is_admin) {
            $this->assertJson('{"message": "Product somente podera ser atualizado por admins!"}');
            return;
        }
        $this->assertDatabaseHas('products', $data);
    }

    public function test_it_can_delete_a_product()
    {
        $random = Product::inRandomOrder()->first();

        $this->deleteJson('/api/products/' . $random->id);

        $is_admin = $this->isAdmin();
        if (null === $is_admin) {
            $this->assertJson('{"message": "Product somente podera ser removido por admins!"}');
            return;
        }

        $this->assertDatabaseMissing('products', [
            'id' => $random->id,
        ]);
    }

    /**
     * @param $merchant_id
     * @return mixed
     */
    public function isAdmin()
    {
        return $this->adminUser;
    }
}
