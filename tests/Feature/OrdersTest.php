<?php

namespace Tests\Feature;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\User;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class OrdersTest extends TestCase
{
    public $adminUser;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->adminUser = User::where('is_admin', true)->first();
        Sanctum::actingAs(
            User::firstWhere('is_admin', true),
            ['*']
        );
    }

    /**
     * A basic feature test example.
     */
    public function test_order_index_should_return_data(): void
    {
        $response = $this->get('/api/orders');

        $response->assertStatus(200);
        $response->assertJsonIsArray('data');
    }

    public function test_it_can_create_a_order()
    {
        $last_order = Order::orderByDesc('id')->latest()->limit(1)->first(['id'])->id;
        $order = Order::factory(1)->make()->toArray()[0];
        $items = [];
        for ($i = 0; $i < rand(1,5); $i++) {
            $items[$i]['product_id'] = \App\Models\Product::inRandomOrder()->first()->id;
            $items[$i]['quantity'] = rand(1,5);
        }

        $this->post('/api/orders', array_merge($order, ['items' => $items]));

        $this->assertDatabaseHas('orders', ['id' => $last_order++]);
    }

    public function test_it_can_retrieve_a_order()
    {
        $order = Order::inRandomOrder()->first();
        $response = $this->get('/api/orders/' . $order->id);
        $response->assertOk();
    }

    public function test_it_can_update_a_order()
    {
        $order = Order::inRandomOrder()->first();
        $items = [];
        for ($i = 0; $i < rand(1,5); $i++) {
            $items[$i]['product_id'] = \App\Models\Product::inRandomOrder()->first()->id;
            $items[$i]['quantity'] = rand(1,5);
        }
        $data = array_merge(
            ['status' => $order->status],
            ['items' => $items]
        );

        $response = $this->putJson('/api/orders/' . $order->id, $data);;

        $response->assertContent(json_encode(['message' => 'Pedido atualizado com sucesso!']));
    }

    public function test_it_can_delete_a_order()
    {
        $random = Order::inRandomOrder()->first();

        $this->deleteJson('/api/orders/' . $random->id);

        $this->assertDatabaseMissing('orders', [
            'id' => $random->id,
        ]);
    }
}
