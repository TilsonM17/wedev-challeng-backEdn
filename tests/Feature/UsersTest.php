<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class UsersTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->actingAs(User::first());
    }

    /**
     * A basic feature test example.
     */
    public function test_index_should_return_data(): void
    {
        $response = $this->get('/api/users');

        $response->assertStatus(200);
        $response->assertJsonIsArray('data');
    }

    public function test_it_can_create_a_user()
    {
        $user = User::factory(1)->makeOne();

        $data = [
            'full_name' => $user->full_name,
            'is_admin' => $user->is_admin
        ];
        $this->post('/api/users', $data);

        $this->assertDatabaseHas('users', $data);
    }

    public function test_it_can_update_a_user()
    {
        $random = User::inRandomOrder()->first();
        $user = User::factory(1)->makeOne();

        $data = [
            'full_name' => $user->full_name,
            'is_admin' => $user->is_admin
        ];
        $this->putJson('/api/users/' . $random->id, $data);

        $this->assertDatabaseHas('users', $data);
        $this->assertDatabaseMissing('users', [
            'id' => $random->id,
            'full_name' => $random->full_name
        ]);
    }

    public function test_it_can_delete_a_user()
    {
        $random = User::inRandomOrder()->first();

        $this->deleteJson('/api/users/' . $random->id);
        $this->assertDatabaseMissing('users', [
            'id' => $random->id,
        ]);
    }
}
